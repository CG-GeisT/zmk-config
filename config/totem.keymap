#include <input/processors.dtsi>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2
#define ZMK_POINTING_DEFAULT_MOVE_VAL 3000
#define ZMK_POINTING_DEFAULT_SCRL_VAL 30

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <175>;
    tapping-term-ms = <200>;
};

&mmv {
    acceleration-exponent = <1>;          // 1
    time-to-max-speed-ms = <500>;         // 300
    delay-ms = <0>;                       // 0
};

&msc {
    acceleration-exponent = <0>;          // 0
    time-to-max-speed-ms = <300>;         // 300
    delay-ms = <0>;                       // 0
};

&mmv_input_listener {
    warp {
        layers = <2>;
        input-processors = <&zip_xy_scaler 3 1>;
    };

    precision {
        layers = <4>;
        input-processors = <&zip_xy_scaler 1 2>;
    };
};

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        comma_semic: comma_semic {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMIC";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ex_que: ex_que {
            compatible = "zmk,behavior-mod-morph";
            label = "EX_QUE";
            bindings = <&kp EXCLAMATION>, <&kp QUESTION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        gaming_switch: gaming_switch {
            compatible = "zmk,behavior-tap-dance";
            label = "GAMING_SWITCH";
            #binding-cells = <0>;
            bindings = <&to 0>, <&to 5>;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <LT2 RT2 RM1 RM2 RM3>;
        };

        hold_sticky: hold_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_STICKY";
            bindings = <&kp>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        magic_shift: magic_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "MAGIC_SHIFT";
            #binding-cells = <0>;
            bindings = <&hold_sticky LSHIFT LSHIFT>, <&caps_word>;
        };
    };

    combos {
        compatible = "zmk,combos";

        escape {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "Base";
            bindings = <
        &kp B        &kp F        &kp L         &kp K          &kp Q          &kp P             &kp G         &kp O         &kp U          &kp DOT
        &hml LGUI N  &hml LALT S  &hml LCTRL H  &hml LSHIFT T  &kp M          &kp Y             &hmr RSHFT C  &hmr RCTRL A  &hmr RALT E    &hmr RGUI I
&trans  &kp X        &kp V        &kp J         &kp D          &kp Z          &kp SINGLE_QUOTE  &kp W         &kp SLASH     &kp SEMICOLON  &kp COMMA    &gaming_switch
                                  &lt 4 TAB     &kp R          &lt 1 SPACE    &lt 2 ENTER       &magic_shift  &kp ESCAPE
            >;
        };

        Sym {
            bindings = <
        &swapper  &kp AT     &kp HASH         &kp DLLR         &kp PRCNT    &kp CARET      &kp PLUS          &kp ASTRK        &kp AMPERSAND  &kp COLON
        &kp ESC   &kp LBKT   &hml LCTRL LBRC  &hml LSHFT LPAR  &kp LT       &kp GT         &hmr LSHIFT RPAR  &hmr LCTRL RBRC  &kp RBKT       &kp SEMI
&trans  &trans    &kp GRAVE  &kp BSLH         &kp EQUAL        &kp TILDE    &kp UNDER      &kp MINUS         &kp SLASH        &kp PIPE       &kp QUESTION  &trans
                             &trans           &trans           &trans       &kp BACKSPACE  &kp DEL           &trans
            >;
        };

        Num {
            bindings = <
        &kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6   &kp N7      &kp N8     &kp N9    &kp N0
        &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp F11    &kp F12  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI
&trans  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp F6   &kp F7      &kp F8     &kp F9    &kp F10   &trans
                            &trans     &trans     &trans     &trans   &trans      &trans
            >;
        };

        numpad {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans  &trans
                        &trans  &sl 3   &trans    &trans  &trans           &kp KP_NUMBER_0
            >;
        };

        Nav {
            bindings = <
        &swapper         &trans     &trans     &trans      &trans    &trans         &kp HOME        &kp PAGE_DOWN   &kp PG_UP     &kp END
        &mt LGUI ESCAPE  &kp LALT   &kp LCTRL  &kp LSHIFT  &trans    &trans         &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT
&trans  &kp LC(Z)        &kp LC(X)  &kp LC(C)  &kp LC(V)   &trans    &trans         &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                                    &trans     &trans      &trans    &kp BACKSPACE  &kp DELETE      &trans
            >;
        };

        Gaming {
            bindings = <
        &kp TAB    &kp Q  &kp W   &kp E  &kp R        &trans  &trans  &trans  &trans  &trans
        &kp LSHFT  &kp A  &kp S   &kp D  &kp F        &trans  &trans  &trans  &trans  &trans
&trans  &kp LCTRL  &kp Z  &kp X   &kp C  &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                          &trans  &mo 6  &kp SPACE    &trans  &trans  &trans
            >;
        };

        GamingNum {
            bindings = <
        &swapper      &kp N1  &kp N2  &kp N3  &kp T     &trans  &trans  &trans  &trans  &trans
        &kp ESC       &kp N4  &kp N5  &kp N6  &kp G     &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_ALT  &kp F1  &kp F2  &kp F3  &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                              &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
