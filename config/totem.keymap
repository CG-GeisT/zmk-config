#include <input/processors.dtsi>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs
#define ZMK_POINTING_DEFAULT_MOVE_VAL 2000 // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20  // 10
#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30
#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <175>;
    tapping-term-ms = <200>;
};

&mmv {
    acceleration-exponent = <1>;          // 1
    time-to-max-speed-ms = <500>;         // 300
    delay-ms = <0>;                       // 0
};

&msc {
    acceleration-exponent = <0>;          // 0
    time-to-max-speed-ms = <300>;         // 300
    delay-ms = <0>;                       // 0
};

&mmv_input_listener {
    warp {
        layers = <2>;
        input-processors = <&zip_xy_scaler 3 1>;
    };

    precision {
        layers = <4>;
        input-processors = <&zip_xy_scaler 1 2>;
    };
};

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LPAR>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RPAR>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_semic: comma_semic {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMIC";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        que_ex: que_ex {
            compatible = "zmk,behavior-mod-morph";
            label = "QUE_EX";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        At {
            bindings = <&kp AT>;
            key-positions = <1 11>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Hash {
            bindings = <&kp HASH>;
            key-positions = <2 12>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <3 13>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Percent {
            bindings = <&kp PERCENT>;
            key-positions = <4 14>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Grave {
            bindings = <&kp GRAVE>;
            key-positions = <11 22>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <23 12>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Equal {
            bindings = <&kp EQUAL>;
            key-positions = <24 13>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Tilde {
            bindings = <&kp TILDE>;
            key-positions = <25 14>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Caret {
            bindings = <&kp CARET>;
            key-positions = <15 5>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Plus {
            bindings = <&kp PLUS>;
            key-positions = <6 16>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Asterisk {
            bindings = <&kp ASTRK>;
            key-positions = <17 7>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Ampersand {
            bindings = <&kp AMPERSAND>;
            key-positions = <8 18>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Under {
            bindings = <&kp UNDER>;
            key-positions = <26 15>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Minus {
            bindings = <&kp MINUS>;
            key-positions = <16 27>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Slash {
            bindings = <&kp SLASH>;
            key-positions = <17 28>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <18 29>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        Esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Cut {
            bindings = <&kp LC(X)>;
            key-positions = <24 22>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <6 7>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Delete {
            bindings = <&kp DEL>;
            key-positions = <8 7>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Gt {
            bindings = <&kp GREATER_THAN>;
            key-positions = <15 16>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        RPar {
            bindings = <&kp RPAR>;
            key-positions = <17 16>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        RBrc {
            bindings = <&kp RBRC>;
            key-positions = <17 18>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        RBkt {
            bindings = <&kp RBKT>;
            key-positions = <19 18>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        Lt {
            bindings = <&kp LT>;
            key-positions = <14 13>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        LPar {
            bindings = <&kp LPAR>;
            key-positions = <13 12>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        LBrc {
            bindings = <&kp LBRC>;
            key-positions = <12 11>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        LBkt {
            bindings = <&kp LBKT>;
            key-positions = <11 10>;
            layers = <0>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "Base";
            bindings = <
        &kp Q        &kp W        &kp E         &kp R          &kp T          &kp Y        &kp U         &kp I         &kp O        &kp P
        &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F  &kp G          &kp H        &hmr RSHFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SINGLE_QUOTE
&trans  &kp Z        &kp X        &kp C         &kp V          &kp B          &kp N        &kp M         &comma_semic  &dot_colon   &kp SLASH               &to 0
                                  &lt 3 ESC     &lt 2 TAB      &lt 4 SPACE    &lt 4 ENTER  &lt 1 BSPC    &lt 0 DEL
            >;
        };

        Num {
            bindings = <
        &kp N1    &kp N2    &kp N3     &kp N4     &kp N5     &kp N6   &kp N7      &kp N8     &kp N9    &kp N0
        &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &kp F11    &kp F12  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI
&trans  &kp F1    &kp F2    &kp F3     &kp F4     &kp F5     &kp F6   &kp F7      &kp F8     &kp F9    &kp F10   &trans
                            &trans     &trans     &trans     &trans   &trans      &trans
            >;
        };

        Nav {
            bindings = <
        &trans    &msc SCRL_UP  &trans     &msc SCRL_DOWN  &kp PG_UP    &kp PG_UP  &msc SCRL_DOWN  &kp UP    &msc SCRL_UP  &trans
        &sk LGUI  &sk LALT      &sk LCTRL  &sk LSHIFT      &trans       &trans     &kp LEFT        &kp DOWN  &kp RIGHT     &trans
&trans  &trans    &kp LC(X)     &kp LC(C)  &kp LC(V)       &kp PG_DN    &kp PG_UP  &kp HOME        &trans    &kp END       &trans  &trans
                                &trans     &trans          &trans       &trans     &trans          &trans
            >;
        };

        Mouse {
            bindings = <
        &trans  &kp C_MUTE        &kp C_VOLUME_UP  &kp C_PLAY_PAUSE   &trans    &trans    &msc SCRL_DOWN  &mmv MOVE_UP    &msc SCRL_UP     &trans
        &trans  &kp LG(LC(LEFT))  &kp C_VOL_DN     &kp LG(LC(RIGHT))  &trans    &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&trans  &trans  &trans            &kp LC(LG(D))    &trans             &trans    &trans    &mkp MB1        &mkp MB2        &mkp MB3         &trans  &trans
                                  &trans           &trans             &trans    &mkp MB1  &mkp MB2        &mkp MB3
            >;
        };

        Sym {
            bindings = <
        &kp EXCL  &kp AT     &kp HASH  &kp DLLR              &kp PRCNT    &kp CARET  &kp PLUS   &kp ASTRK  &kp AMPERSAND  &kp COLON
        &trans    &kp LBKT   &kp LBRC  &kp LEFT_PARENTHESIS  &kp LT       &kp GT     &kp RPAR   &kp RBRC   &kp RBKT       &kp SEMI
&trans  &trans    &kp GRAVE  &kp BSLH  &kp EQUAL             &kp TILDE    &kp UNDER  &kp MINUS  &kp SLASH  &kp PIPE       &kp QUESTION  &trans
                             &trans    &trans                &trans       &trans     &trans     &trans
            >;
        };
    };
};
