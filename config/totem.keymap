#include <input/processors.dtsi>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define Base        0
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumbs
#define ZMK_POINTING_DEFAULT_MOVE_VAL 2000 // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20  // 10
#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30
#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { ignore-modifiers; };

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <220>;
    quick-tap-ms = <220>;
    hold-trigger-key-positions = <0>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <175>;
    tapping-term-ms = <200>;
};

&mmv {
    acceleration-exponent = <1>;          // 1
    time-to-max-speed-ms = <500>;         // 300
    delay-ms = <0>;                       // 0
};

&msc {
    acceleration-exponent = <0>;          // 0
    time-to-max-speed-ms = <300>;         // 300
    delay-ms = <0>;                       // 0
};

&mmv_input_listener {
    warp {
        layers = <2>;
        input-processors = <&zip_xy_scaler 3 1>;
    };

    precision {
        layers = <4>;
        input-processors = <&zip_xy_scaler 1 2>;
    };
};

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

/ {
    behaviors {
        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp LPAR>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp RPAR>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        comma_semic: comma_semic {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMIC";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        que_ex: que_ex {
            compatible = "zmk,behavior-mod-morph";
            label = "QUE_EX";
            bindings = <&kp QUESTION>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };
    };

    combos {
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            display-name = "Base";
            bindings = <
       &kp Q        &kp W        &kp E         &kp R          &kp T        &kp Y    &kp U            &kp I         &kp O        &kp P
       &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F  &kp G        &kp H    &hmr RSHFT J     &hmr RCTRL K  &hmr RALT L  &hmr RGUI SINGLE_QUOTE
&to 1  &kp Z        &kp X        &kp C         &kp V          &kp B        &kp N    &kp M            &comma_semic  &dot_colon   &que_ex                 &to 0
                                 &lt 2 ESC     &lt 3 TAB      &kp SPACE    &kp RET  &lt 4 BSPC       &lt 5 DEL
            >;
        };

        Gaming {
            bindings = <
       &kp TAB    &kp Q  &kp W      &kp E           &kp R        &trans  &trans  &trans  &trans  &trans
       &kp LSHFT  &kp A  &kp S      &kp D           &kp F        &trans  &trans  &trans  &trans  &trans
&to 0  &kp LCTRL  &kp Z  &kp X      &kp C           &kp V        &trans  &trans  &trans  &trans  &trans  &trans
                         &lt 2 ESC  &lt 3 LALT  &kp SPACE        &trans  &trans  &trans
            >;
        };

        Fn {
            bindings = <
        &kp F12        &kp F7        &kp F8         &kp F9          &kp PSCRN    &trans  &trans          &trans     &trans        &trans
        &hml LGUI F11  &hml LALT F4  &hml LCTRL F5  &hml LSHIFT F6  &trans             &trans  &kp LSHIFT      &kp LCTRL  &kp LALT      &kp LGUI
&trans  &kp F10        &kp F1        &kp F2         &kp F3          &trans             &trans  &trans          &trans     &trans        &trans        &trans
                                     &trans         &trans          &trans             &trans  &trans          &trans
            >;
        };

        Num {
            bindings = <
        &kp N0        &kp N7        &kp N8         &kp N9          &trans    &trans  &trans      &trans     &trans    &trans
        &hml LGUI N0  &hml LALT N4  &hml LCTRL N5  &hml LSHIFT N6  &trans    &trans  &kp LSHIFT  &kp LCTRL  &kp LALT  &kp LGUI
&trans  &kp N0        &kp N1        &kp N2         &kp N3          &trans    &trans  &trans      &trans     &trans    &trans    &trans
                                    &trans         &trans          &trans    &trans  &trans      &trans
            >;
        };

        Nav {
            bindings = <
        &trans    &trans     &trans     &trans      &kp PAGE_UP      &trans  &trans  &trans  &trans  &trans
        &sk LGUI  &sk LALT   &sk LCTRL  &sk LSHIFT  &kp PAGE_DOWN    &trans  &trans  &trans  &trans  &trans
&trans  &trans    &kp LC(X)  &kp LC(C)  &kp LC(V)   &trans           &trans  &trans  &trans  &trans  &trans  &trans
                             &trans     &trans      &trans           &trans       &trans             &trans
            >;
        };

        Mouse {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &msc SCRL_UP    &kp PG_UP       &mmv MOVE_UP    &kp PG_DN        &trans
        &trans  &trans  &trans  &trans  &trans    &msc SCRL_LEFT  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_RIGHT
&trans  &trans  &trans  &trans  &trans  &trans    &msc SCRL_DOWN  &mkp MB1        &mkp MB2        &mkp MB3         &trans           &trans
                        &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };

        Media {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        Sym {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
